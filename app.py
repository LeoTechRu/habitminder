from datetime import datetime, timedelta, date as dt_date
from flask import Flask, render_template, request, redirect, url_for, flash, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, logout_user, current_user, login_required
from flask_migrate import Migrate
from werkzeug.security import generate_password_hash, check_password_hash
from wtforms import StringField, PasswordField, BooleanField, SelectField
from wtforms.validators import DataRequired, Email, Length, EqualTo
import os
import json
import logging
from dotenv import load_dotenv
load_dotenv()  # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
db = SQLAlchemy()
migrate = Migrate()
login_manager = LoginManager()

def create_app():
    app = Flask(__name__)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.config.from_prefixed_env()
    app.config.update({
        'SQLALCHEMY_DATABASE_URI': os.environ.get('DATABASE_URL'),
        'SECRET_KEY': os.environ.get('SECRET_KEY'),
        'SQLALCHEMY_TRACK_MODIFICATIONS': False
    })
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    db.init_app(app)
    migrate.init_app(app, db)
    login_manager.init_app(app)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    login_manager.login_view = 'login'
    login_manager.login_message_category = 'info'

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã Jinja2
    def ru_frequency(freq):
        frequency_map = {
            'daily': '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ',
            'weekly': '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ', 
            'monthly': '–ï–∂–µ–º–µ—Å—è—á–Ω–æ'
        }
        return frequency_map.get(freq, freq)
    
    def format_tooltip(date_str, habit):
        try:
            date_obj = dt_date.fromisoformat(date_str)
            status_map = {
                'completed': '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ',
                'missed': '‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ',
                'current': 'üïí –°–µ–≥–æ–¥–Ω—è'
            }
            return f"{date_obj.strftime('%d %B %Y')}\n{status_map.get(habit.progress.get(date_str, 'current'))}"
        except ValueError:
            return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã"

    app.jinja_env.filters.update({
        'ru_frequency': ru_frequency,
        'format_tooltip': format_tooltip
    })

    # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã
    @app.context_processor
    def inject_utilities():
        def generate_calendar(habit):
            today = dt_date.today()
            start_date = max(
                habit.created_at.date(),
                today - timedelta(days=14)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 2 –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥ –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
            )
        
            calendar_days = []
            for i in range(30):  # –í—Å–µ–≥–æ 30 –¥–Ω–µ–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
                current_date = start_date + timedelta(days=i)
                status = 'future' if current_date > today else (
                    'completed' if habit.progress.get(current_date.isoformat(), False)
                    else 'current' if current_date == today
                    else 'missed'
                )
                calendar_days.append((current_date.isoformat(), status))
            return calendar_days

        def is_future_date(date_str):
            try:
                return dt_date.fromisoformat(date_str) > dt_date.today()
            except ValueError:
                return False

        return {
            'generate_calendar': generate_calendar,
            'is_future_date': is_future_date,
            'timedelta': timedelta,
            'current_year': datetime.utcnow().year
        }

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    with app.app_context():
        db.create_all()
        # –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not User.query.filter_by(email='admin@example.com').first():
            admin = User(email='admin@example.com')
            admin.set_password('securepassword')
            db.session.add(admin)
            db.session.commit()
            logging.info("–°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å email: admin@example.com")

    return app

# –ú–æ–¥–µ–ª–∏
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(100), unique=True)
    password_hash = db.Column(db.String(256))
    habits = db.relationship('Habit', backref='user', lazy='dynamic')

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

class Habit(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100))
    frequency = db.Column(db.String(20))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    progress = db.Column(db.JSON, default=dict)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ dict
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    
    def reset_progress(self):
        self.progress = {}
        self.created_at = datetime.utcnow()

# –§–∞–±—Ä–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = create_app()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask-Login
@login_manager.user_loader
def load_user(user_id):
    logging.debug(f"–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {user_id}")
    return User.query.get(int(user_id))

# –§–æ—Ä–º—ã
from flask_wtf import FlaskForm

class LoginForm(FlaskForm):
    email = StringField('Email', validators=[
        DataRequired(message="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ"),
        Email(message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email")
    ])
    password = PasswordField('–ü–∞—Ä–æ–ª—å', validators=[
        DataRequired(message="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
    ])
    remember = BooleanField('–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è')

class RegistrationForm(FlaskForm):
    email = StringField('Email', validators=[
        DataRequired(message="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ"),
        Email(message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email")
    ])
    password = PasswordField('–ü–∞—Ä–æ–ª—å', validators=[
        DataRequired(message="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"),
        Length(min=8, max=64, message="–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 8 –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤")
    ])
    confirm = PasswordField('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å', validators=[
        DataRequired(message="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"),
        EqualTo('password', message="–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
    ])

class HabitForm(FlaskForm):
    title = StringField('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏', validators=[
        DataRequired(message="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
    ])
    frequency = SelectField('–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å', choices=[
        ('daily', '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ'), 
        ('weekly', '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'), 
        ('monthly', '–ï–∂–µ–º–µ—Å—è—á–Ω–æ')
    ])

# –†–æ—É—Ç—ã
@app.route('/')
def index():
    logging.debug("–ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    return render_template('index.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    logging.debug("–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞")
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user and user.check_password(form.password.data):
            login_user(user, remember=form.remember.data)
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {form.email.data} —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É")
            return redirect(url_for('dashboard'))
        flash('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å', 'error')
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤—Ö–æ–¥ –¥–ª—è email: {form.email.data}")
    return render_template('login.html', form=form)

@app.route('/register', methods=['GET', 'POST'])
def register():
    logging.debug("–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    form = RegistrationForm()
    if form.validate_on_submit():
        if User.query.filter_by(email=form.email.data).first():
            flash('–≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', 'error')
            return redirect(url_for('register'))
        
        user = User(email=form.email.data)
        user.set_password(form.password.data)
        db.session.add(user)
        db.session.commit()
        flash('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É', 'success')
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {form.email.data} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        return redirect(url_for('login'))
    return render_template('register.html', form=form)

@app.route('/dashboard')
@login_required
def dashboard():
    logging.debug("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã dashboard")
    habits = Habit.query.filter_by(user_id=current_user.id).all()
    
    total_days = 30  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å

    for habit in habits:
        logging.debug(f"Habit {habit.id}: Progress values: {list(habit.progress.values())}, Total days: {len(habit.progress.values())}")
    
    return render_template('dashboard.html', habits=habits, total_days=total_days)

@app.route('/habit/create', methods=['GET', 'POST'])
@login_required
def create_habit():
    logging.debug("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏")
    form = HabitForm()
    if form.validate_on_submit():
        try:
            habit = Habit(
                title=form.title.data,
                frequency=form.frequency.data,
                user_id=current_user.id
            )
            db.session.add(habit)
            db.session.commit()
            flash('–ü—Ä–∏–≤—ã—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞', 'success')
            logging.info(f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit.title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {current_user.email}")
            return redirect(url_for('dashboard'))
        except Exception as e:
            flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏: {str(e)}', 'error')
            logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏: {str(e)}')
    return render_template('create_habit.html', form=form)

@app.route('/habit/<int:habit_id>/update', methods=['POST'])
@login_required
def update_habit(habit_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–≤—ã—á–∫–∏"""
    logging.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏ —Å ID: {habit_id}")
    habit = Habit.query.get_or_404(habit_id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if habit.user_id != current_user.id:
        logging.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤—ã—á–∫–µ {habit_id} –æ—Ç {current_user.email}")
        return jsonify({'status': 'error', 'message': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
        if request.is_json:
            data = request.get_json()
            date_str = data.get('date')
        else:  # –î–ª—è —Ñ–æ—Ä–º-–¥–∞–Ω–Ω—ã—Ö
            date_str = request.form.get('date')

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        if not isinstance(date_str, str) or len(date_str) != 10:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
        date_obj = dt_date.fromisoformat(date_str)
        today = dt_date.today()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–∞—Ç—ã
        if date_obj != today:
            logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã: {date_str}")
            return jsonify({
                'status': 'error',
                'message': '–ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å'
            }), 400
            
        if date_obj < habit.created_at.date():
            logging.warning(f"–î–∞—Ç–∞ {date_str} —Ä–∞–Ω—å—à–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏")
            return jsonify({
                'status': 'error',
                'message': '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ'
            }), 400

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress = habit.progress.copy() or {}
        current_status = progress.get(date_str, False)
        progress[date_str] = not current_status
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        habit.progress = progress
        db.session.commit()
        
        logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—ã—á–∫–∏ {habit_id} –∑–∞ {date_str}")
        return jsonify({
            'status': 'success',
            'new_status': progress[date_str],
            'completed_days': sum(1 for v in progress.values() if v),
            'total_days': len(progress)
        })
        
    except ValueError as e:
        logging.error(f'–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}')
        return jsonify({
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}'
        }), 400
    except Exception as e:
        logging.error(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}')
        db.session.rollback()
        return jsonify({
            'status': 'error',
            'message': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + str(e)
        }), 500

@app.route('/habit/<int:habit_id>/update_meta', methods=['POST'])
@login_required
def update_habit_meta(habit_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–∫–∏"""
    habit = Habit.query.get_or_404(habit_id)
    
    if habit.user_id != current_user.id:
        return jsonify({'status': 'error', 'message': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403

    try:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è
        new_title = request.form.get('title')
        if new_title and new_title != habit.title:
            habit.title = new_title
            db.session.commit()
            flash('–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', 'success')
        
        return redirect(url_for('dashboard'))

    except Exception as e:
        db.session.rollback()
        logging.error(f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}')
        flash('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏', 'danger')
        return redirect(url_for('dashboard'))

@app.route('/habit/<int:habit_id>/delete', methods=['DELETE'])
@login_required
def delete_habit(habit_id):
    logging.debug(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏ —Å ID: {habit_id}")
    habit = Habit.query.get_or_404(habit_id)
    if habit.user_id != current_user.id:
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏ {habit_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {current_user.email}, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –ø—Ä–∞–≤")
        return {'status': 'error', 'message': '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è'}, 403
    
    db.session.delete(habit)
    db.session.commit()
    logging.info(f"–ü—Ä–∏–≤—ã—á–∫–∞ {habit_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {current_user.email}")
    return {'status': 'success'}

@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash('–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'info')
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.email} –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
    return redirect(url_for('index'))

#if __name__ == '__main__':
#    app.run(host='0.0.0.0', port=os.environ.get('PORT', 3001))